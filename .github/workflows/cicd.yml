name: CICD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  provision-aws:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.1.7

      - name: Terraform Init with S3 backend
        run: |
          terraform init \
            -backend-config="bucket=mvilsoet-bucket" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=us-east-2"
        working-directory: ./terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: terraform plan
        working-directory: ./terraform

      - name: Provision AWS resources
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - name: Get ECR Repository Name
        id: ecr_output
        run: |
          echo "ECR_REPOSITORY=$(terraform output -raw ecr_repository_name)" >> $GITHUB_ENV
        working-directory: ./terraform

  build-and-push:
    needs: provision-aws
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lambda_name:
          - trajectory
          - lights
          - roadValidation
          - stateDump

    env:
      AWS_REGION: us-east-2
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY: ${{ needs.provision-aws.outputs.ECR_REPOSITORY }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build and Push Docker Image to ECR
        env:
          IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        run: |
          docker build -t $IMAGE_URI --build-arg LAMBDA_FILE=${{ matrix.lambda_name }} .
          docker push $IMAGE_URI

  deploy-ansible:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-2
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ansible
        uses: ansible/ansible-setup-action@v2

      - name: Run Ansible Playbook to deploy to ECR and update Lambdas
        run: ansible-playbook ansible/playbook.yml
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
