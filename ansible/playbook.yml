- name: Deploy Docker images to ECR and create/update Lambda functions
  hosts: localhost
  vars:
    aws_region: "{{ lookup('env', 'AWS_REGION') }}"
    ecr_repository_name: "traffic-simulation-lambda-repo"
    aws_account_id: "{{ lookup('env', 'AWS_ACCOUNT_ID') }}"
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
    api_gateway_arn: "arn:aws:execute-api:{{ aws_region }}:{{ aws_account_id }}:{{ lookup('env', 'API_GATEWAY_ID') }}/*/*"
    lambda_functions:
      - function_name: "trajectory"
        tag: "trajectory"
        env_vars:
          DYNAMODB_TABLE: "TrafficSimulation"
          VEHICLE_TRAJECTORY_QUEUE: "VehicleTrajectoryQueue"
      - function_name: "lights"
        tag: "lights"
        env_vars:
          DYNAMODB_TABLE: "TrafficSimulation"
          TRAFFIC_LIGHT_QUEUE: "TrafficLightQueue"
      - function_name: "roadValidation"
        tag: "roadValidation"
        env_vars:
          DYNAMODB_TABLE: "TrafficSimulation"
      - function_name: "stateDump"
        tag: "stateDump"
        env_vars:
          DYNAMODB_TABLE: "TrafficSimulation"

  tasks:
    - name: Authenticate Docker to ECR
      shell: aws ecr get-login-password --region {{ aws_region }} | docker login --username AWS --password-stdin {{ aws_account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"
      register: ecr_login
      changed_when: false

    - name: Build Docker image for {{ item.function_name }}
      docker_image:
        name: "{{ aws_account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com/{{ ecr_repository_name }}:{{ item.tag }}"
        build: .
        tag: "{{ item.tag }}"
        buildargs:
          LAMBDA_FILE: "{{ item.function_name }}"
      when:
        - ecr_login is succeeded
      loop: "{{ lambda_functions }}"
      loop_control:
        label: "{{ item.function_name }}"

    - name: Push Docker image to ECR for {{ item.function_name }}
      docker_image:
        name: "{{ aws_account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com/{{ ecr_repository_name }}:{{ item.tag }}"
        push: yes
      when:
        - ecr_login is succeeded
      loop: "{{ lambda_functions }}"
      loop_control:
        label: "{{ item.function_name }}"

    - name: Create or update Lambda functions with ECR images
      aws_lambda:
        name: "{{ item.function_name }}"
        role: "arn:aws:iam::{{ aws_account_id }}:role/LambdaExecutionRole"
        package_type: "Image"
        image_uri: "{{ aws_account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com/{{ ecr_repository_name }}:{{ item.tag }}"
        memory_size: 128
        timeout: 30
        environment_variables: "{{ item.env_vars }}"
        state: present
        region: "{{ aws_region }}"
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"
      loop: "{{ lambda_functions }}"
      loop_control:
        label: "{{ item.function_name }}"

    - name: Add permission for API Gateway to invoke stateDump Lambda function
      aws_lambda_permission:
        function_name: "stateDump"
        statement_id: "AllowAPIGatewayInvoke"
        action: "lambda:InvokeFunction"
        principal: "apigateway.amazonaws.com"
        source_arn: "{{ api_gateway_arn }}"
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"
